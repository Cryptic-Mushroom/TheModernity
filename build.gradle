/*
 * Copyright (c) 2020 RedGalaxy
 * All rights reserved. Do not distribute.
 *
 * Date:   03 - 24 - 2020
 * Author: rgsw
 */

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3+', changing: true
    }
}

allprojects {
    project.ext.implName = "The Modernity"

    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    apply from: "$rootDir/environment.gradle"

    sourceSets {
        main {
            resources {
                srcDirs += "src/generated/resources"
            }
        }
    }

    minecraft {
        // Snapshot mappings: March 22, 2020, v1.15.1
        mappings channel: 'snapshot', version: '20200322-1.15.1'

        // Access transformer
        accessTransformer = file( 'src/main/resources/META-INF/accesstransformer.cfg' )

        runs {
            client {
                workingDirectory project.file( 'run' )

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                property 'forge.logging.console.level', 'info'

                mods {
                    modernity {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file( 'run' )

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                property 'forge.logging.console.level', 'info'

                mods {
                    modernity {
                        source sourceSets.main
                    }
                }
            }

            data {
                workingDirectory project.file( 'run' )

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                property 'forge.logging.console.level', 'info'

                args '--mod', 'modernity', '--all', '--output', file( 'src/generated/resources/' )

                mods {
                    modernity {
                        source sourceSets.main
                    }
                }
            }
        }
    }

    repositories {
        mavenLocal()
        maven {
            url uri( 'https://maven.pkg.github.com/RedGalaxySW/Noise' )
            credentials {
            }
        }
        maven {
            url uri( 'https://maven.pkg.github.com/RedGalaxySW/IOLib' )
            credentials {
                // Make sure you have these properties declared in your computer's gradle.properties file.
                // It may be any token as long as that token has the read:packages permission granted.
                username = project.ext.gprUser
                password = project.ext.gprKey
            }
        }
    }

    configurations {
        embed
        compile.extendsFrom( embed )

        internal
        compile.extendsFrom( internal )
    }

    dependencies {
        minecraft 'net.minecraftforge:forge:1.15.2-31.1.0'

        embed 'net.rgsw:noise:1.0.3'
        embed 'net.rgsw:io:1.0.1'
    }

    jar {
        doFirst {
            from configurations.embed.collect { it.isDirectory() ? it : zipTree( it ) }
            from configurations.internal.collect { it.isDirectory() ? it : zipTree( it ) }
        }

        manifest {
            attributes(
                [
                    "Specification-Title"     : "The Modernity",
                    "Specification-Vendor"    : "Red Galaxy",
                    "Specification-Version"   : "${ version }",
                    "Implementation-Title"    : project.ext.implName,
                    "Implementation-Version"  : "${ version }",
                    "Implementation-Vendor"   : "Red Galaxy",
                    "Implementation-Timestamp": new Date().format( "yyyy-MM-dd'T'HH:mm:ssZ" )
                ]
            )
        }
    }

    apply from: "$rootDir/gen_sources.gradle"
}


dependencies {
    internal( project( ':ModernityAPI' ) ) {
        transitive false
    }
    internal( project( ':ModernityCore' ) ) {
        transitive false
    }
    internal( project( ':ModernityMod' ) ) {
        transitive false
    }
    internal( project( ':ModernityTest' ) ) {
        transitive false
    }
}

task collectClasses( type: Copy ) {
    dependsOn ':ModernityAPI:classes'
    dependsOn ':ModernityCore:classes'
    dependsOn ':ModernityMod:classes'
    dependsOn ':ModernityTest:classes'

    configurations.collectMany {
        it.allDependencies
    }.findAll {
        it instanceof ProjectDependency
    }.each {
        ProjectDependency dep = (ProjectDependency) it
        from( "$dep.dependencyProject.buildDir/classes/java/main" )
    }

    into( "build/classes/java/main" )
}

task collectResources( type: Copy ) {
    dependsOn ':ModernityAPI:classes'
    dependsOn ':ModernityCore:classes'
    dependsOn ':ModernityMod:classes'
    dependsOn ':ModernityTest:classes'

    configurations.collectMany {
        it.allDependencies
    }.findAll {
        it instanceof ProjectDependency
    }.each {
        ProjectDependency dep = (ProjectDependency) it
        from( "$dep.dependencyProject.buildDir/resources/main" )
    }

    into( "build/resources/main" )
}

classes {
    dependsOn 'collectClasses'
}

processResources {
    dependsOn 'collectResources'
}

jar {
    enabled false
}

assemble {
    dependsOn.remove( 'reobfJar' )
}

build {
    dependsOn ':ModernityAPI:build'
    dependsOn ':ModernityMod:build'
    dependsOn ':ModernityTest:build'
}

println( "Building for IDE: ${project.ext.isIDE}")