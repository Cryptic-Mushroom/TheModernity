/*
 * Copyright (c) 2020 RedGalaxy & contributors
 * All rights reserved. Do not distribute.
 *
 * For a full license, see LICENSE.txt
 */

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.shadew.net/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3+', changing: true
        classpath group: 'net.shadew', name: 'modutil', version: '1.0-beta.10'
    }
}

// ==================
// ALL PROJECTS SETUP
// ==================

allprojects {
    project.ext.implName = "Nature's Debris"

    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'net.shadew.modutil'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply from: "$rootDir/environment.gradle"

    minecraft {
        // Snapshot mappings: March 22, 2020, v1.15.1
        mappings channel: 'snapshot', version: '20201003-mixed-1.16.3'

        // Access transformer
        accessTransformer = file('$rootDir/NaturesDebrisCore/src/main/resources/META-INF/accesstransformer.cfg')
    }

    modutil {
        shade('net.shadew.ptg', 'natures.debris.internal.net.shadew.ptg')
        shade('net.shadew.util', 'natures.debris.internal.net.shadew.util')

        changelogJson file("$rootDir/changelog.json")

        constant('mod_id', project.ext.modid)
        constant('mod_name', project.ext.implName)
        constant('version', changelogInfo.versionNumber)
        constant('version_name', changelogInfo.versionName)
        constant('group', project.group)
        constant('build_time', project.ext.timeOfExecution)
        constant('sha1') {
            !project.canJarBeSigned() ? "NO:FI:NG:ER:PR:IN:TA:VA:IL:AB:LE" : project.getProjectFingerprint()
        }
        constant('signed') {
            return project.canJarBeSigned()
        }

        constantAnnotation 'natures.debris.DynamicConstant'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "Progwml6 maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            name = "Shadew's Maven"
            url = "http://maven.shadew.net/"
        }
        maven {
            name = "tterrag's maven"
            url = "https://maven.tterrag.com/"
        }
        maven {
            url "https://io.terraforged.com/repository/maven/"
        }
        flatDir {
            dirs "$rootDir/dependencies"
        }
    }

    configurations {
        embed // External deps embedded into the JAR file
        compile.extendsFrom(embed)
    }

    dependencies {
        minecraft 'net.minecraftforge:forge:1.16.3-34.1.0'

        embed("net.shadew:ptg:1.2.2") {
            transitive false
        }

        embed "net.shadew:shwutil:1.3"

        compileOnly fg.deobf("mezz.jei:jei-1.16.3:7.3.2.36:api")
        runtimeOnly fg.deobf("mezz.jei:jei-1.16.3:7.3.2.36")

        compileOnly fg.deobf("com.github.glitchfiend:biomesoplenty:1.16.3-12.0.0.404:api-obf")
        compile fg.deobf("com.github.glitchfiend:biomesoplenty:1.16.3-12.0.0.404:universal-obf")
    }

    jar {
        doFirst {
            // Include necessary dependencies
            from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
        }

        manifest {
            attributes(
                [
                    "Specification-Title"     : "Nature's Debris",
                    "Specification-Vendor"    : "Shadew",
                    "Specification-Version"   : "${version}",
                    "Implementation-Title"    : project.ext.implName,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "Shadew",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                ]
            )
        }
    }

    apply from: "$rootDir/gen_sources.gradle"
}



// ==================
// ROOT PROJECT SETUP
// ==================

// We should not build anything in the root project so we remove all building tasks and only build the necessary
// subprojects. We only use the root project for running.
build {
    dependsOn.clear()

    dependsOn ':NaturesDebrisAPI:build'
    dependsOn ':NaturesDebrisMod:build'
    dependsOn ':NaturesDebrisTest:build'
}


// Configure run configurations only for root project
minecraft {
    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'natures.debris.ide', 'true'

            mods {
                ndebris {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'natures.debris.ide', 'true'

            mods {
                ndebris {
                    source sourceSets.main
                }
            }
        }
    }
}

modutil {
    updateJson file('versioninfo/update.json')
    markdownChangelog file('versioninfo/latest_changelog.md')
    markdownChangelog file("versioninfo/${changelogInfo.versionNumber}_changelog.md")
}


// Depend on all subprojects
dependencies {
    embed(project(':NaturesDebrisAPI')) {
        transitive false
    }
    embed(project(':NaturesDebrisCore')) {
        transitive false
    }
    embed(project(':NaturesDebrisMod')) {
        transitive false
    }
    embed(project(':NaturesDebrisTest')) {
        transitive false
    }
}

// Collect classes and resources from other projects so that running includes all classes
task collectClasses(type: Copy) {
    dependsOn ':NaturesDebrisAPI:classes'
    dependsOn ':NaturesDebrisCore:classes'
    dependsOn ':NaturesDebrisMod:classes'
    dependsOn ':NaturesDebrisTest:classes'

    outputs.upToDateWhen { t -> false }

    doFirst {
        delete "$buildDir/classes/java/main"
        file("$buildDir/classes/java/main").mkdirs()
    }

    configurations.collectMany {
        it.allDependencies
    }.findAll {
        it instanceof ProjectDependency
    }.each {
        ProjectDependency dep = (ProjectDependency) it
        from("$dep.dependencyProject.buildDir/classes/java/main")
    }

    into("$buildDir/classes/java/main")
}

compileJava {
    dependsOn 'collectClasses'
}


task collectResources(type: Copy) {
    dependsOn ':NaturesDebrisAPI:classes'
    dependsOn ':NaturesDebrisCore:classes'
    dependsOn ':NaturesDebrisMod:classes'
    dependsOn ':NaturesDebrisTest:classes'

    doFirst {
        delete "$buildDir/resources/main"
        file("$buildDir/resources/main").mkdirs()
    }

    outputs.upToDateWhen { t -> false }

    configurations.collectMany {
        it.allDependencies
    }.findAll {
        it instanceof ProjectDependency
    }.each {
        ProjectDependency dep = (ProjectDependency) it
        from("$dep.dependencyProject.buildDir/resources/main")
    }

    into("$buildDir/resources/main")
}

processResources {
    dependsOn 'collectResources'
}


if (project.ext.isIDE) {
    println "Building for IDE"
}
else {
    println "Building for production"
}
