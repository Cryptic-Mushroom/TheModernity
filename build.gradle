// Setup for build script itself
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'

version = 'indev-0.0.1'
group = 'net.rgsw'
archivesBaseName = 'modernity'

// Use Java 1.8
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'


project.ext.canJarBeSigned = {
    return getVariable('mdKeyStore') != null && (!isDeploymentEnv || isDeploymentRelease)
}

//Returns the public fingerprint, may be empty ("")
project.ext.getProjectFingerprint = {
    if (canJarBeSigned()) {
        return getVariable('mdSignSHA1').replaceAll(':', '').toLowerCase()
    }
    return ''
}

//Attempts to get a project variable and if none is found it tries to read from a system environment variable
project.ext.getVariable = { key ->
    return project.hasProperty(key) ? project.property(key) : ENV[key]
}

project.ext.ENV = System.getenv()
project.ext.isDeploymentEnv = ENV['DEPLOY_ENV'] != null && 'true'.equals(ENV['DEPLOY_ENV'])
project.ext.isDeploymentRelease = project.isDeploymentEnv && ENV['DEPLOY_BUILD_TYPE'] != null && 'release'.equals(ENV['DEPLOY_BUILD_TYPE'])
project.ext.buildnumber = project.isDeploymentEnv ? ENV['DEPLOY_BUILD_NUMBER'] : ''

project.ext.modid = 'modernity'


minecraft {
    // Snapshot mappings: May 26, 2019
    mappings channel: 'snapshot', version: '20190526-1.13.2'

    // TODO: Access transformer
    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                modernity {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                modernity {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.208'
    // compile 'dep' // Specifies a dependency
    // provided 'dep' // May not exist at runtime
    // deobf 'dep' // Remaps a dependency
}

jar {
    manifest {
        attributes([
            "Specification-Title": "The Modernity",
            "Specification-Vendor": "Red Galaxy",
            "Specification-Version": "${version}",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" : "Red Galaxy",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task signJar(dependsOn: 'reobfJar') {
    doLast {
        println ":$project.name:${name}"
        ant.signjar(
                destDir: "${jar.archivePath.parentFile}",
                jar: "${jar.archivePath}",
                alias: getVariable('mdKeyStoreAlias'),
                storetype: "jks",
                keystore: getVariable('mdKeyStore'),
                storepass: getVariable('mdKeyStorePass'),
                keypass: getVariable('mdKeyStoreKeyPass'),
                verbose: true,
                preservelastmodified: "true"
        )
        println "Signed jar: ${jar.archivePath}"
    }
//    if (canJarBeSigned()) {
//        keyStore = getVariable('mdKeyStore')
//        alias = getVariable('mdKeyStoreAlias')
//        storePass = getVariable('mdKeyStorePass')
//        keyPass = getVariable('mdKeyStoreKeyPass')
//        inputFile = jar.archivePath
//        outputFile = jar.archivePath
//    }
}


build {
    dependsOn signJar
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'signJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}